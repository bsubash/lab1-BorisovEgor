#include <iostream>
#include <fstream>
#include <string>
#include <iterator>
#include <list>

class Lib {
public:
	std::string user;
	std::string book;
	std::fstream file;
	std::list<std::string> list1;
	std::list<std::string> list2;
	void check() {
		if (file.is_open()) { std::cout << "File opened" << std::endl; }
		else { std::cout << "Failed to open" << std::endl; }
	}
	void Record(std::string book, std::fstream& file, std::list<std::string> list1) {
		/*std::cin.ignore(500, '\n');
		std::getline(std::cin, book);*/
		list1.push_back(book);
		std::copy(list1.begin(), list1.end(), std::ostream_iterator<std::string>(file, "\n"));
		std::cout << "File_was_written" << std::endl << std::endl;
		file.close();

	}
	void Reading(std::fstream& file, std::list<std::string> list2) {
		check();
		for (std::string line; std::getline(file, line);) {
			list2.push_back(line);
		}
		for (auto & a : list2) {
			std::cout << a << std::endl;
		} std::cout << "File read" << std::endl;
		file.close();
	}
	std::string Search(std::fstream& file) {
		//check();
		std::cout << "Search.." << std::endl;
		std::string s;
		char c[50];
		std::cin >> s;
		std::cin.ignore(500, '\n');
		while (!file.eof())
		{
			file.getline(c, 500);
			if (c == s) {
				std::cout << "Yes" << std::endl; file.close(); return s; return 0;
			}
		}
		std::cout << "No such name" << std::endl; file.close(); return 0;
	}
	void compilation(std::fstream& file, std::list<std::string> list1) {
		file.open("outuser.txt");
		check();
		std::cout << "Input user, ";
		std::string user = Search(file);
		file.close();
		file.open("outbooks.txt");
		std::cout << "Input book, ";
		std::string s = Search(file);
		file.close();
		user = user + '-' + s;
		file.open("givebooks.txt", std::ios::app);
		check();
		//std::cin.ignore(500, '\n');
		list1.push_back(user);
		std::copy(list1.begin(), list1.end(), std::ostream_iterator<std::string>(file, "\n"));
		std::cout << "File was rewritten" << std::endl;
		file.close();
	}
	void Recompilation(std::fstream& file) {//Ещё делаю этот метод(это про возвращение в книги)
	}
};


int main()
{
	Lib ob1;
	int b = 0;
	std::cout << "                       LIBRARY" << std::endl;
	std::cout << "outbooks.txt for working with books,users.txt - with users,givebooks.txt for working with taken books" << std::endl;
	std::cout << std::endl << "------------------------------------------------------------------" << std::endl;
	std::cout << "1   -    add book" << "          " << "5   -   give book" << std::endl;
	std::cout << "2   -    add user" << "          " << "6   -   take book" << std::endl;
	std::cout << "3   -    show books" << "        " << "7   -   find book" << std::endl;
	std::cout << "4   -    show users" << "        " << "8   -   find user" << std::endl;
	std::cout << "9   -    show given books" << std::endl;
	std::cout << std::endl << "------------------------------------------------------------------" << std::endl;
	while (b != 10) {
		std::cout << "Choose the action,10 to quit" << std::endl;
		std::cin >> b;
		switch (b) {
			std::cin.ignore(500, '\n');
		case 1: {std::cout << "add book:" << std::endl;
			ob1.file.open("outbooks.txt", std::ios::app); ob1.Record(ob1.book, ob1.file, ob1.list1); break; }
		case 2: {std::cout << "add user:" << std::endl;
			ob1.file.open("outuser.txt", std::ios::app); ob1.Record(ob1.user, ob1.file, ob1.list1); break; }
		case 3: {ob1.file.open("outbooks.txt"); ob1.Reading(ob1.file, ob1.list2); break; }
		case 4: {ob1.file.open("outuser.txt"); ob1.Reading(ob1.file, ob1.list2); break; }
		case 5: {ob1.compilation(ob1.file, ob1.list1); break; }
				//case 6: {ob1.file.open("givebooks.txt"); ob1.Recompilation(ob1.file); break; }
		case 7: {ob1.file.open("outbooks.txt"); ob1.Search(ob1.file); break; }
		case 8: {ob1.file.open("outuser.txt"); ob1.Search(ob1.file); break; }
		case 9: {ob1.file.open("givebooks.txt"); ob1.Reading(ob1.file, ob1.list2); break; }
		default: {
			std::cout << "There are no such action!";
			system("pause");
			return 0;
		}
		}
	}
	system("pause");
	return 0;
}